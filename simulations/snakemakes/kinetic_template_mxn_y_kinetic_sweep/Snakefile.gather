import os

N, M, SPACE, RANDNO = glob_wildcards(
    "../highres_3x3_10_seeds/results/{N}x{M}_{space}_default_mu_ks_yield_conc/rand{randno}/done.tkn"
)
N = set(N)
M = set(M)
SPACE = set(SPACE)
RANDNO = set(RANDNO)

nufebex = "/mnt/nfs/home/njw311/dev-compute-vol/src/lmp_mpi"
nufebcores = 1

ks_base = 3.5e-5
mu_base = 0.00028 
#sweep_coeffs = [0.5,0.6,0.7,0.8,0.9,1.1,1.2,1.3,1.4,1.5]
sweep_coeffs = [0.5,0.6,0.7,0.8,0.9,1.1,1.2,1.3,1.4,1.5]

ks_sweep = [ks_base * c for c in sweep_coeffs]
mu_sweep = [mu_base * c for c in sweep_coeffs]
yield_sweep = 0.70

localrules: generate_runs, template_input, copy_baseline

rule all:
        input:
            expand(
                    "results/{gridN}x{gridN}_{space}_default_mu_ks_yield_conc/ks_{ks:.2e}-mu_{mu:.2e}-yield_{bioyield:.2e}/rand{seed}/colony_outcomes.csv",
                gridN=N,
                gridM=M,
                space=SPACE,
                seed=RANDNO,
                ks = ks_sweep, mu = mu_sweep, bioyield = yield_sweep 
            )

rule classify_colonies:
	input:
        	"results/{gridN}x{gridN}_{space}_default_mu_ks_yield_conc/ks_{ks:.2e}-mu_{mu:.2e}-yield_{bioyield:.2e}/rand{seed}/done.tkn"
	output:
        	"results/{gridN}x{gridN}_{space}_default_mu_ks_yield_conc/ks_{ks:.2e}-mu_{mu:.2e}-yield_{bioyield:.2e}/rand{seed}/colony_outcomes.csv"
	shell:
		"python scripts/postproc.py results/{gridN}x{gridN}_{space}_default_mu_ks_yield_conc/ks_{ks:.2e}-mu_{mu:.2e}-yield_{bioyield:.2e}/rand{seed}/"

rule run_sweeps:
    input:
        "results/{gridN}x{gridN}_{space}_default_mu_ks_yield_conc/ks_{ks}-mu_{mu}-yield_{bioyield}/rand{seed}/Inputscript.lmp"
    output:
        "results/{gridN}x{gridN}_{space}_default_mu_ks_yield_conc/ks_{ks}-mu_{mu}-yield_{bioyield}/rand{seed}/done.tkn"
    run:
        shell("results/{wildcards.gridN}x{wildcards.gridN}_{wildcards.space}_default_mu_ks_yield_conc/ks_{wildcards.ks}-mu_{wildcards.mu}-yield_{wildcards.bioyield}/rand{wildcards.seed}/Allclean.sh")
        shell("results/{wildcards.gridN}x{wildcards.gridN}_{wildcards.space}_default_mu_ks_yield_conc/ks_{wildcards.ks}-mu_{wildcards.mu}-yield_{wildcards.bioyield}/rand{wildcards.seed}/Allrun.sh {nufebex} {nufebcores}")

rule generate_runs:
    input:
        "resources/baseline-seeds/{gridN}x{gridN}_{space}_default_mu_ks_yield_conc/rand{seed}/Inputscript.templated",
    output:
        "results/{gridN}x{gridN}_{space}_default_mu_ks_yield_conc/ks_{ks}-mu_{mu}-yield_{bioyield}/rand{seed}/Inputscript.lmp"
    shell:
       "python scripts/generate_kinetic_sweep_instance.py resources/baseline-seeds/{wildcards.gridN}x{wildcards.gridN}_{wildcards.space}_default_mu_ks_yield_conc/rand{wildcards.seed} {wildcards.ks} {wildcards.mu} {wildcards.bioyield}" 

rule template_input:
    input:
        "resources/baseline-seeds/{gridN}x{gridN}_{space}_default_mu_ks_yield_conc/rand{seed}/biggest_loser.txt",
    output:
        "resources/baseline-seeds/{gridN}x{gridN}_{space}_default_mu_ks_yield_conc/rand{seed}/Inputscript.templated",
    shell:
        "python scripts/create_input_template.py resources/baseline-seeds/{wildcards.gridN}x{wildcards.gridN}_{wildcards.space}_default_mu_ks_yield_conc/rand{wildcards.seed}"


rule determine_loser:
    input:
        "resources/baseline-seeds/{gridN}x{gridN}_{space}_default_mu_ks_yield_conc/rand{seed}/Inputscript.orig",
    output:
        "resources/baseline-seeds/{gridN}x{gridN}_{space}_default_mu_ks_yield_conc/rand{seed}/biggest_loser.txt",
    run:
        lineages = int(wildcards.gridN) ** 2
        shell(
            "python scripts/biggest_loser.py resources/baseline-seeds/{wildcards.gridN}x{wildcards.gridN}_{wildcards.space}_default_mu_ks_yield_conc/rand{wildcards.seed} cell_rel_volumes.csv {lineages}"
        )


rule copy_baseline:
    input:
        "../highres_3x3_seeds/results/{gridN}x{gridN}_{space}_default_mu_ks_yield_conc/rand{seed}/done.tkn",
    output:
        "resources/baseline-seeds/{gridN}x{gridN}_{space}_default_mu_ks_yield_conc/rand{seed}/Inputscript.orig",
    run:
        shell("scripts/copy_baseline.sh {input} {output}")


# rule all:
#     input:
#        expand("results/{N}x{N}_{space}_default_mu_ks_yield_conc/rand{randno}/done.tkn", N = grid_N, space = grid_spacing, randno = RANDS)
#
# rule run_sims:
#     input:
#         "results/{N}x{N}_{space}_default_mu_ks_yield_conc/rand{randno}/Inputscript.lmp"
#     output:
#         "results/{N}x{N}_{space}_default_mu_ks_yield_conc/rand{randno}/done.tkn"
#     run:
#         shell("results/{wildcards.N}x{wildcards.N}_{wildcards.space}_default_mu_ks_yield_conc/rand{wildcards.randno}/Allclean.sh")
#         shell("results/{wildcards.N}x{wildcards.N}_{wildcards.space}_default_mu_ks_yield_conc/rand{wildcards.randno}/Allrun.sh {nufebex} {nufebcores}")
#
# rule gen_sims:
#     input:
#        "resources/seedlist.txt",
#        "resources/grids.json",
#        "resources/template/Inputscript.lmp",
#        "resources/template/Allrun.sh",
#        "resources/template/Allclean.sh"
#     output:
#        "results/{N}x{N}_{space}_default_mu_ks_yield_conc/rand{randno}/Inputscript.lmp",
#        "results/{N}x{N}_{space}_default_mu_ks_yield_conc/rand{randno}/atom.in"
#     run:
#        shell("python scripts/generate.py {wildcards.randno} {wildcards.N}x{wildcards.N}_{wildcards.space}_default_mu_ks_yield_conc/")
#        shell("python scripts/create_grid.py {wildcards.randno} {wildcards.N}x{wildcards.N}_{wildcards.space}_default_mu_ks_yield_conc/ {wildcards.N} {wildcards.space}")
